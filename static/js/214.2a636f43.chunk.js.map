{"version":3,"file":"static/js/214.2a636f43.chunk.js","mappings":"sNACA,EAAgC,qCAAhC,EAAqF,qCAArF,EAAsI,iCAAtI,EAAkL,gC,iDCyDlL,EAjDsB,WACpB,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,EAAG,UAAMC,EAAAA,GAAN,kBAAwBH,EAAxB,4BAAmDI,EAAAA,IAE5D,GAAqCC,EAAAA,EAAAA,GAAeH,GAA5CI,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,KAE5B,GAAIF,EACF,OAAO,SAACG,EAAA,EAAD,IAET,GAAIF,EACF,OAAO,SAACG,EAAA,EAAD,IAGT,GAAIF,EAAM,CACR,IAAMG,EAAOH,EAAKG,KAElB,OAAoB,IAAhBA,EAAKC,QAEL,4BACE,SAAC,IAAD,CAAOC,MAAOC,EAAAA,EAAAA,0BACd,eAAIC,MAAO,CAAEC,UAAW,UAAxB,SAAoC,+BAMxC,eAAIC,UAAWF,EAAf,SACGJ,EAAKO,KAAI,SAAAC,GACR,IAAQC,EAAoDD,EAApDC,QAASC,EAA2CF,EAA3CE,aAAcC,EAA6BH,EAA7BG,UAAWC,EAAkBJ,EAAlBI,cAC1C,OACE,gBAAkBN,UAAWF,EAA7B,WACE,gBACES,IACEH,EAAY,yCAC0BA,GAClCI,EAENC,IAAKJ,EACLL,UAAWF,KAEb,eAAGE,UAAWF,EAAd,UAA8B,cAAYO,MAC1C,eAAGL,UAAWF,EAAd,UAA8B,SAAOQ,OAX9BH,EAcZ,KAGN,CACF,C","sources":["webpack://react-homework-template/./src/components/pages-components/MovieCastInfo/MovieCastInfo.module.css?4c3e","components/pages-components/MovieCastInfo/MovieCastInfo.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieCastList\":\"MovieCastInfo_movieCastList__R3DB1\",\"movieCastItem\":\"MovieCastInfo_movieCastItem__Ef4gG\",\"castImage\":\"MovieCastInfo_castImage__rrlGY\",\"castName\":\"MovieCastInfo_castName__93UH3\"};","import { useParams } from 'react-router-dom';\nimport { API_KEY, BASE_URL } from 'components/utils/utils';\nimport { useFetchMovies } from 'components/utils/fetchMovies';\nimport style from './MovieCastInfo.module.css';\nimport avatarImg from './avatartImage.png';\nimport Loading from '../Loading/Loading';\nimport ErrorPage from '../Error';\nimport { Empty } from 'antd';\n\nconst MovieCastInfo = () => {\n  const { movieId } = useParams();\n  const url = `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`;\n\n  const { isLoading, isError, data } = useFetchMovies(url);\n\n  if (isLoading) {\n    return <Loading />;\n  }\n  if (isError) {\n    return <ErrorPage />;\n  }\n\n  if (data) {\n    const cast = data.cast;\n\n    if (cast.length === 0) {\n      return (\n        <div>\n          <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n          <h2 style={{ textAlign: 'center' }}>No cast for this movie</h2>\n        </div>\n      );\n    }\n\n    return (\n      <ul className={style.movieCastList}>\n        {cast.map(movieCast => {\n          const { cast_id, profile_path, character, original_name } = movieCast;\n          return (\n            <li key={cast_id} className={style.movieCastItem}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : avatarImg\n                }\n                alt={character}\n                className={style.castImage}\n              />\n              <p className={style.castName}>Character: {character}</p>\n              <p className={style.castName}>Name: {original_name}</p>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n};\nexport default MovieCastInfo;\n"],"names":["movieId","useParams","url","BASE_URL","API_KEY","useFetchMovies","isLoading","isError","data","Loading","Error","cast","length","image","Empty","style","textAlign","className","map","movieCast","cast_id","profile_path","character","original_name","src","avatarImg","alt"],"sourceRoot":""}